knitr::opts_chunk$set(echo = TRUE)
cat("\014")  # Clear Console
rm(list = ls(all.names = TRUE))# clear all
gc()
air <- read.csv("listings-complete.csv")
library(tidyverse)
library(dplyr)
colnames(air)
# Convert character columns to factors in the dataset
air <- air %>% mutate_if(is.character, as.factor)
# Extract numbers from "bathrooms_text" and convert to numeric
air$bathrooms <- as.numeric(gsub("[^0-9.]+", "", air$bathrooms_text))
# Define the selected variables for analysis
selected_variables <- c(
"host_is_superhost", "host_response_time", "host_response_rate",
"host_acceptance_rate", "accommodates",
"bathrooms", "bedrooms", "price", "neighbourhood_cleansed",
"host_listings_count", "minimum_nights", "maximum_nights",
"instant_bookable", "host_identity_verified", "availability_30",
"availability_60", "availability_90","review_scores_rating","reviews_per_month", "has_availability","availability_365","number_of_reviews"
)
# Create a new dataframe with only the selected variables
air_new <- air[selected_variables]
# Remove rows with NA values from air_new
air_clean <- na.omit(air_new)
# Check the structure of air_clean
str(air_clean)
# Convert "price" column to numeric
air_clean$price <- as.numeric(gsub("[$,]", "", air_clean$price))
# Convert "host_acceptance_rate" and "host_response_rate" columns to numeric
air_clean$host_acceptance_rate <- as.numeric(gsub("%", "", air_clean$host_acceptance_rate)) / 100
air_clean$host_response_rate <- as.numeric(gsub("%", "", air_clean$host_response_rate)) / 100
# Check the structure of air_clean again
str(air_clean)
# Summarize the cleaned dataset
summary(air_clean)
# Calculate the count of bathrooms
bathrooms_count <- table(air_clean$bathrooms)
library(ggplot2)
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bathrooms)
print(p + labs(title = "Price compared to accommodation size split by bathrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$bathrooms)) + geom_point()
print(p + labs(title = "Price compared to bathrooms", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews", y = "Price", x = "Number of reviews"))
# Calculate correlation matrix
correlation_matrix <- model.matrix(~0 + ., air_clean) %>%
cor(use = "pairwise.complete.obs")
# Identify correlations with the "y" variable (price)
review_correlations <- correlation_matrix["price",]
# Sort correlations in descending order to identify predictors
sorted_correlations <- sort(review_correlations, decreasing = TRUE)
# Convert sorted correlations to a data frame
correlation_df <- data.frame(Predictor_Variable = names(sorted_correlations), Correlation_with_y = sorted_correlations)
options(scipen = 999)
# Print the sorted correlations table
print(correlation_df)
#install.packages("plotly")
require(plotly)
m <- list(
l =  10,
r = 10,
b = 10,
t = 10,
pad = 1
)
heatmap <- plot_ly(x=colnames(correlation_matrix), y=rownames(correlation_matrix), z = correlation_matrix, type="heatmap",
colors=colorRamp(c("darkblue","white","darkred"))) %>%
layout(margin = m)
#save graph as an html
#htmlwidgets::saveWidget(as_widget(heatmap), "heatmap.html")
heatmap
# Load the required library for linear regression
library(stats)
# Define the linear regression model using selected variables
model <- lm(price ~ host_is_superhost + host_response_time + host_response_rate + host_acceptance_rate +
accommodates + bathrooms + bedrooms + neighbourhood_cleansed + host_listings_count +
minimum_nights + maximum_nights + instant_bookable + host_identity_verified +
availability_30 + availability_60 + availability_90 + review_scores_rating + reviews_per_month + has_availability,
data = air_clean)
# Print the summary of the model to check coefficients and other statistics
summary(model)
# Remove rows with missing values
air_clean <- na.omit(air_clean)
# Perform stepwise selection
step_model <- step(model)
# Summary of the model with stepwise selection
summary(step_model)
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bathrooms) + geom_boxplot(aes(group = air_clean$accommodates))
print(p + labs(title = "Price compared to accommodation size split by bathrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$bathrooms)) + geom_boxplot(aes(group = air_clean$bathrooms))
print(p + labs(title = "Price compared to bathrooms", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews", y = "Price", x = "Number of reviews"))
# Create a vector of significant neighbourhoods
significant_neighborhoods <- c("Downtown", "Downtown Eastside","Kitsilano", "Hastings-Sunrise","Kerrisdale", "Killarney","Marpole", "Mount Pleasant", "Oakridge", "Renfrew-Collingwood","Sunset", "Victoria-Fraserview", "West End")
# Filter the dataset to include only significant neighbourhoods
air_clean_sig <- air_clean %>%
filter(neighbourhood_cleansed %in% significant_neighborhoods)
# Fit a linear regression model with significant neighbourhoods
lm_model_significant_neighborhoods <- lm(price ~ host_is_superhost + host_response_time + host_response_rate + host_acceptance_rate +
accommodates + bathrooms + bedrooms + neighbourhood_cleansed + host_listings_count +
minimum_nights + maximum_nights + instant_bookable + host_identity_verified +
availability_30 + availability_60 + availability_90 + review_scores_rating + reviews_per_month + has_availability,
data = air_clean_sig)
# Perform stepwise selection on the model
step_model2 <- step(lm_model_significant_neighborhoods)
# Summary of the model with stepwise selection
summary(step_model2)
p = ggplot(air_clean_sig, aes(y = air_clean_sig$price, x = air_clean_sig$accommodates)) + geom_point() + facet_wrap(~air_clean_sig$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_sig, aes(y = air_clean_sig$price, x = air_clean_sig$accommodates)) + geom_point() + facet_wrap(~air_clean_sig$bathrooms) + geom_boxplot(aes(group = air_clean_sig$accommodates))
print(p + labs(title = "Price compared to accommodation size split by bathrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_sig, aes(y = air_clean_sig$price, x = air_clean_sig$bathrooms)) + geom_boxplot(aes(group = air_clean_sig$bathrooms))
print(p + labs(title = "Price compared to bathrooms", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean_sig, aes(y = air_clean_sig$price, x = air_clean_sig$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews", y = "Price", x = "Number of reviews"))
# Function to detect outliers using IQR and remove them
remove_outliers <- function(data, variable) {
q1 <- quantile(data[[variable]], 0.25)
q3 <- quantile(data[[variable]], 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 4.5 * iqr
# Remove outliers from the data frame
filtered_data <- data[!(data[[variable]] < lower_bound | data[[variable]] > upper_bound), ]
return(filtered_data)
}
# Remove outliers from the 'price' variable in air_clean
air_clean_filtered <- remove_outliers(air_clean, 'price')
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$accommodates)) + geom_point() + facet_wrap(~air_clean_filtered$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$accommodates)) + geom_point() + facet_wrap(~air_clean_filtered$bathrooms) + geom_boxplot(aes(group = air_clean_filtered$accommodates))
print(p + labs(title = "Price compared to accommodation size split by bathrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$bathrooms)) + geom_boxplot(aes(group = air_clean_filtered$bathrooms))
print(p + labs(title = "Price compared to bathrooms", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews", y = "Price", x = "Number of reviews"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$accommodates)) + geom_point() + facet_wrap(~air_clean_filtered$bathrooms)
#+ geom_boxplot(aes(group = air_clean_filtered$accommodates))
print(p + labs(title = "Price compared to accommodation size split by bathrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$accommodates)) + geom_point() + facet_wrap(~air_clean_filtered$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$accommodates)) + geom_point() + facet_wrap(~air_clean_filtered$bathrooms)
#+ geom_boxplot(aes(group = air_clean_filtered$accommodates))
print(p + labs(title = "Price compared to accommodation size split by bathrooms", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$bathrooms)) + geom_boxplot(aes(group = air_clean_filtered$bathrooms))
print(p + labs(title = "Price compared to bathrooms", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews", y = "Price", x = "Number of reviews"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$bathrooms)) + geom_boxplot(aes(group = air_clean_filtered$bathrooms)) + geom_smooth()
print(p + labs(title = "Price compared to bathrooms", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews", y = "Price", x = "Number of reviews"))
library(ggplot2)
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms (Model 1)", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bathrooms)
print(p + labs(title = "Price compared to accommodation size split by bathrooms (Model 1)", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$bathrooms)) + geom_point()
print(p + labs(title = "Price compared to bathrooms (Model 1)", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews (Model 1)", y = "Price", x = "Number of reviews"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$accommodates)) + geom_point() + facet_wrap(~air_clean_filtered$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms (Model 3)", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$accommodates)) + geom_point() + facet_wrap(~air_clean_filtered$bathrooms)
#+ geom_boxplot(aes(group = air_clean_filtered$accommodates))
print(p + labs(title = "Price compared to accommodation size split by bathrooms (Model 3)", y = "Price", x = "Accommodates"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$bathrooms)) + geom_boxplot(aes(group = air_clean_filtered$bathrooms)) + geom_smooth()
print(p + labs(title = "Price compared to bathrooms (Model 3)", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean_filtered, aes(y = air_clean_filtered$price, x = air_clean_filtered$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews (Model 3)", y = "Price", x = "Number of reviews"))
p = ggplot(log_model, aes(y = log_model$model$price, x = log_model$model$accommodates)) + geom_point() + facet_wrap(~log_model$model$bedrooms)
p = ggplot(log_model, aes(y = log_model$model$price, x = log_model$model$accommodates)) + geom_point() + facet_wrap(~log_model$model$bedrooms)
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bedrooms)
print(p + labs(title = "Price compared to accommodation size split by bedrooms (Model 2)", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$accommodates)) + geom_point() + facet_wrap(~air_clean$bathrooms) + geom_boxplot(aes(group = air_clean$accommodates))
print(p + labs(title = "Price compared to accommodation size split by bathrooms (Model 2)", y = "Price", x = "Accommodates"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$bathrooms)) + geom_boxplot(aes(group = air_clean$bathrooms))
print(p + labs(title = "Price compared to bathrooms (Model 2)", y = "Price", x = "Bathrooms"))
p = ggplot(air_clean, aes(y = air_clean$price, x = air_clean$number_of_reviews)) + geom_point()
print(p + labs(title = "Price compared to the number of reviews (Model 2)", y = "Price", x = "Number of reviews"))
